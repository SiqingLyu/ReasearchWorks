# -*- coding: utf-8 -*-
"""
本代码用于找出某范围内的CBRA数据是否包含建筑物，若不包含，则直接返回其对应左下角经纬度坐标
"""
from tools import *
import numpy
import os
import arcpy

MINI_DISTANCE = 0.000001

BBoxes_Northern = [[106.00114210000005, 31.323420775000073, 108.50114210000005, 33.82342077500007], [108.50114210000005, 31.323420775000073, 111.00114210000005, 33.82342077500007], [111.00114210000005, 31.323420775000073, 113.50114210000005, 33.82342077500007], [113.50114210000005, 31.323420775000073, 116.00114210000005, 33.82342077500007], [116.00114210000005, 31.323420775000073, 118.50114210000005, 33.82342077500007], [118.50114210000005, 31.323420775000073, 121.00114210000005, 33.82342077500007], [101.00114210000005, 33.82342077500007, 103.50114210000005, 36.32342077500007], [103.50114210000005, 33.82342077500007, 106.00114210000005, 36.32342077500007], [106.00114210000005, 33.82342077500007, 108.50114210000005, 36.32342077500007], [108.50114210000005, 33.82342077500007, 111.00114210000005, 36.32342077500007], [111.00114210000005, 33.82342077500007, 113.50114210000005, 36.32342077500007], [113.50114210000005, 33.82342077500007, 116.00114210000005, 36.32342077500007], [116.00114210000005, 33.82342077500007, 118.50114210000005, 36.32342077500007], [118.50114210000005, 33.82342077500007, 121.00114210000005, 36.32342077500007], [101.00114210000005, 36.32342077500007, 103.50114210000005, 38.82342077500007], [103.50114210000005, 36.32342077500007, 106.00114210000005, 38.82342077500007], [106.00114210000005, 36.32342077500007, 108.50114210000005, 38.82342077500007], [108.50114210000005, 36.32342077500007, 111.00114210000005, 38.82342077500007], [111.00114210000005, 36.32342077500007, 113.50114210000005, 38.82342077500007], [113.50114210000005, 36.32342077500007, 116.00114210000005, 38.82342077500007], [116.00114210000005, 36.32342077500007, 118.50114210000005, 38.82342077500007], [118.50114210000005, 36.32342077500007, 121.00114210000005, 38.82342077500007], [121.00114210000005, 36.32342077500007, 123.50114210000005, 38.82342077500007], [108.50114210000005, 38.82342077500007, 111.00114210000005, 41.32342077500007], [111.00114210000005, 38.82342077500007, 113.50114210000005, 41.32342077500007], [113.50114210000005, 38.82342077500007, 116.00114210000005, 41.32342077500007], [116.00114210000005, 38.82342077500007, 118.50114210000005, 41.32342077500007], [118.50114210000005, 38.82342077500007, 121.00114210000005, 41.32342077500007], [121.00114210000005, 38.82342077500007, 123.50114210000005, 41.32342077500007], [123.50114210000005, 38.82342077500007, 126.00114210000005, 41.32342077500007], [126.00114210000005, 38.82342077500007, 128.50114210000004, 41.32342077500007], [116.00114210000005, 41.32342077500007, 118.50114210000005, 43.82342077500007], [118.50114210000005, 41.32342077500007, 121.00114210000005, 43.82342077500007], [121.00114210000005, 41.32342077500007, 123.50114210000005, 43.82342077500007], [123.50114210000005, 41.32342077500007, 126.00114210000005, 43.82342077500007], [126.00114210000005, 41.32342077500007, 128.50114210000004, 43.82342077500007], [128.50114210000004, 41.32342077500007, 131.00114210000004, 43.82342077500007], [131.00114210000004, 41.32342077500007, 133.50114210000004, 43.82342077500007], [121.00114210000005, 43.82342077500007, 123.50114210000005, 46.32342077500007], [123.50114210000005, 43.82342077500007, 126.00114210000005, 46.32342077500007], [126.00114210000005, 43.82342077500007, 128.50114210000004, 46.32342077500007], [128.50114210000004, 43.82342077500007, 131.00114210000004, 46.32342077500007], [131.00114210000004, 43.82342077500007, 133.50114210000004, 46.32342077500007], [133.50114210000004, 43.82342077500007, 136.00114210000004, 46.32342077500007], [118.50114210000005, 46.32342077500007, 121.00114210000005, 48.82342077500007], [121.00114210000005, 46.32342077500007, 123.50114210000005, 48.82342077500007], [123.50114210000005, 46.32342077500007, 126.00114210000005, 48.82342077500007], [126.00114210000005, 46.32342077500007, 128.50114210000004, 48.82342077500007], [128.50114210000004, 46.32342077500007, 131.00114210000004, 48.82342077500007], [131.00114210000004, 46.32342077500007, 133.50114210000004, 48.82342077500007], [133.50114210000004, 46.32342077500007, 136.00114210000004, 48.82342077500007], [118.50114210000005, 48.82342077500007, 121.00114210000005, 51.32342077500007], [121.00114210000005, 48.82342077500007, 123.50114210000005, 51.32342077500007], [123.50114210000005, 48.82342077500007, 126.00114210000005, 51.32342077500007], [126.00114210000005, 48.82342077500007, 128.50114210000004, 51.32342077500007], [128.50114210000004, 48.82342077500007, 131.00114210000004, 51.32342077500007], [118.50114210000005, 51.32342077500007, 121.00114210000005, 53.82342077500007], [121.00114210000005, 51.32342077500007, 123.50114210000005, 53.82342077500007], [123.50114210000005, 51.32342077500007, 126.00114210000005, 53.82342077500007], [126.00114210000005, 51.32342077500007, 128.50114210000004, 53.82342077500007]]
BBoxes_Southern = [[108.50114210000005, 16.323420775000073, 111.00114210000005, 18.823420775000073], [101.00114210000005, 18.823420775000073, 103.50114210000005, 21.323420775000073], [108.50114210000005, 18.823420775000073, 111.00114210000005, 21.323420775000073], [98.50114210000005, 21.323420775000073, 101.00114210000005, 23.823420775000073], [101.00114210000005, 21.323420775000073, 103.50114210000005, 23.823420775000073], [103.50114210000005, 21.323420775000073, 106.00114210000005, 23.823420775000073], [106.00114210000005, 21.323420775000073, 108.50114210000005, 23.823420775000073], [108.50114210000005, 21.323420775000073, 111.00114210000005, 23.823420775000073], [111.00114210000005, 21.323420775000073, 113.50114210000005, 23.823420775000073], [113.50114210000005, 21.323420775000073, 116.00114210000005, 23.823420775000073], [116.00114210000005, 21.323420775000073, 118.50114210000005, 23.823420775000073], [118.50114210000005, 21.323420775000073, 121.00114210000005, 23.823420775000073], [121.00114210000005, 21.323420775000073, 123.50114210000005, 23.823420775000073], [96.00114210000005, 23.823420775000073, 98.50114210000005, 26.323420775000073], [98.50114210000005, 23.823420775000073, 101.00114210000005, 26.323420775000073], [101.00114210000005, 23.823420775000073, 103.50114210000005, 26.323420775000073], [103.50114210000005, 23.823420775000073, 106.00114210000005, 26.323420775000073], [106.00114210000005, 23.823420775000073, 108.50114210000005, 26.323420775000073], [108.50114210000005, 23.823420775000073, 111.00114210000005, 26.323420775000073], [111.00114210000005, 23.823420775000073, 113.50114210000005, 26.323420775000073], [113.50114210000005, 23.823420775000073, 116.00114210000005, 26.323420775000073], [116.00114210000005, 23.823420775000073, 118.50114210000005, 26.323420775000073], [118.50114210000005, 23.823420775000073, 121.00114210000005, 26.323420775000073], [121.00114210000005, 23.823420775000073, 123.50114210000005, 26.323420775000073], [98.50114210000005, 26.323420775000073, 101.00114210000005, 28.823420775000073], [101.00114210000005, 26.323420775000073, 103.50114210000005, 28.823420775000073], [103.50114210000005, 26.323420775000073, 106.00114210000005, 28.823420775000073], [106.00114210000005, 26.323420775000073, 108.50114210000005, 28.823420775000073], [108.50114210000005, 26.323420775000073, 111.00114210000005, 28.823420775000073], [111.00114210000005, 26.323420775000073, 113.50114210000005, 28.823420775000073], [113.50114210000005, 26.323420775000073, 116.00114210000005, 28.823420775000073], [116.00114210000005, 26.323420775000073, 118.50114210000005, 28.823420775000073], [118.50114210000005, 26.323420775000073, 121.00114210000005, 28.823420775000073], [121.00114210000005, 26.323420775000073, 123.50114210000005, 28.823420775000073], [101.00114210000005, 28.823420775000073, 103.50114210000005, 31.323420775000073], [103.50114210000005, 28.823420775000073, 106.00114210000005, 31.323420775000073], [106.00114210000005, 28.823420775000073, 108.50114210000005, 31.323420775000073], [108.50114210000005, 28.823420775000073, 111.00114210000005, 31.323420775000073], [111.00114210000005, 28.823420775000073, 113.50114210000005, 31.323420775000073], [113.50114210000005, 28.823420775000073, 116.00114210000005, 31.323420775000073], [116.00114210000005, 28.823420775000073, 118.50114210000005, 31.323420775000073], [118.50114210000005, 28.823420775000073, 121.00114210000005, 31.323420775000073], [121.00114210000005, 28.823420775000073, 123.50114210000005, 31.323420775000073], [103.50114210000005, 31.323420775000073, 106.00114210000005, 33.82342077500007], [106.00114210000005, 31.323420775000073, 108.50114210000005, 33.82342077500007], [108.50114210000005, 31.323420775000073, 111.00114210000005, 33.82342077500007], [111.00114210000005, 31.323420775000073, 113.50114210000005, 33.82342077500007], [113.50114210000005, 31.323420775000073, 116.00114210000005, 33.82342077500007], [116.00114210000005, 31.323420775000073, 118.50114210000005, 33.82342077500007], [118.50114210000005, 31.323420775000073, 121.00114210000005, 33.82342077500007], [121.00114210000005, 31.323420775000073, 123.50114210000005, 33.82342077500007], [103.50114210000005, 33.82342077500007, 106.00114210000005, 36.32342077500007], [106.00114210000005, 33.82342077500007, 108.50114210000005, 36.32342077500007], [118.50114210000005, 33.82342077500007, 121.00114210000005, 36.32342077500007]]
BBoxes_Qingzang =[[96.00114210000005, 23.823420775000073, 98.50114210000005, 26.323420775000073], [98.50114210000005, 23.823420775000073, 101.00114210000005, 26.323420775000073], [83.50114210000005, 26.323420775000073, 86.00114210000005, 28.823420775000073], [86.00114210000005, 26.323420775000073, 88.50114210000005, 28.823420775000073], [88.50114210000005, 26.323420775000073, 91.00114210000005, 28.823420775000073], [91.00114210000005, 26.323420775000073, 93.50114210000005, 28.823420775000073], [93.50114210000005, 26.323420775000073, 96.00114210000005, 28.823420775000073], [96.00114210000005, 26.323420775000073, 98.50114210000005, 28.823420775000073], [98.50114210000005, 26.323420775000073, 101.00114210000005, 28.823420775000073], [101.00114210000005, 26.323420775000073, 103.50114210000005, 28.823420775000073], [78.50114210000005, 28.823420775000073, 81.00114210000005, 31.323420775000073], [81.00114210000005, 28.823420775000073, 83.50114210000005, 31.323420775000073], [83.50114210000005, 28.823420775000073, 86.00114210000005, 31.323420775000073], [86.00114210000005, 28.823420775000073, 88.50114210000005, 31.323420775000073], [88.50114210000005, 28.823420775000073, 91.00114210000005, 31.323420775000073], [91.00114210000005, 28.823420775000073, 93.50114210000005, 31.323420775000073], [93.50114210000005, 28.823420775000073, 96.00114210000005, 31.323420775000073], [96.00114210000005, 28.823420775000073, 98.50114210000005, 31.323420775000073], [98.50114210000005, 28.823420775000073, 101.00114210000005, 31.323420775000073], [101.00114210000005, 28.823420775000073, 103.50114210000005, 31.323420775000073], [103.50114210000005, 28.823420775000073, 106.00114210000005, 31.323420775000073], [78.50114210000005, 31.323420775000073, 81.00114210000005, 33.82342077500007], [81.00114210000005, 31.323420775000073, 83.50114210000005, 33.82342077500007], [83.50114210000005, 31.323420775000073, 86.00114210000005, 33.82342077500007], [86.00114210000005, 31.323420775000073, 88.50114210000005, 33.82342077500007], [88.50114210000005, 31.323420775000073, 91.00114210000005, 33.82342077500007], [91.00114210000005, 31.323420775000073, 93.50114210000005, 33.82342077500007], [93.50114210000005, 31.323420775000073, 96.00114210000005, 33.82342077500007], [96.00114210000005, 31.323420775000073, 98.50114210000005, 33.82342077500007], [98.50114210000005, 31.323420775000073, 101.00114210000005, 33.82342077500007], [101.00114210000005, 31.323420775000073, 103.50114210000005, 33.82342077500007], [103.50114210000005, 31.323420775000073, 106.00114210000005, 33.82342077500007], [76.00114210000005, 33.82342077500007, 78.50114210000005, 36.32342077500007], [78.50114210000005, 33.82342077500007, 81.00114210000005, 36.32342077500007], [81.00114210000005, 33.82342077500007, 83.50114210000005, 36.32342077500007], [83.50114210000005, 33.82342077500007, 86.00114210000005, 36.32342077500007], [86.00114210000005, 33.82342077500007, 88.50114210000005, 36.32342077500007], [88.50114210000005, 33.82342077500007, 91.00114210000005, 36.32342077500007], [91.00114210000005, 33.82342077500007, 93.50114210000005, 36.32342077500007], [93.50114210000005, 33.82342077500007, 96.00114210000005, 36.32342077500007], [96.00114210000005, 33.82342077500007, 98.50114210000005, 36.32342077500007], [98.50114210000005, 33.82342077500007, 101.00114210000005, 36.32342077500007], [101.00114210000005, 33.82342077500007, 103.50114210000005, 36.32342077500007], [103.50114210000005, 33.82342077500007, 106.00114210000005, 36.32342077500007], [73.50114210000005, 36.32342077500007, 76.00114210000005, 38.82342077500007], [76.00114210000005, 36.32342077500007, 78.50114210000005, 38.82342077500007], [78.50114210000005, 36.32342077500007, 81.00114210000005, 38.82342077500007], [81.00114210000005, 36.32342077500007, 83.50114210000005, 38.82342077500007], [83.50114210000005, 36.32342077500007, 86.00114210000005, 38.82342077500007], [86.00114210000005, 36.32342077500007, 88.50114210000005, 38.82342077500007], [88.50114210000005, 36.32342077500007, 91.00114210000005, 38.82342077500007], [91.00114210000005, 36.32342077500007, 93.50114210000005, 38.82342077500007], [93.50114210000005, 36.32342077500007, 96.00114210000005, 38.82342077500007], [96.00114210000005, 36.32342077500007, 98.50114210000005, 38.82342077500007], [98.50114210000005, 36.32342077500007, 101.00114210000005, 38.82342077500007], [101.00114210000005, 36.32342077500007, 103.50114210000005, 38.82342077500007], [73.50114210000005, 38.82342077500007, 76.00114210000005, 41.32342077500007], [86.00114210000005, 38.82342077500007, 88.50114210000005, 41.32342077500007], [88.50114210000005, 38.82342077500007, 91.00114210000005, 41.32342077500007], [91.00114210000005, 38.82342077500007, 93.50114210000005, 41.32342077500007], [93.50114210000005, 38.82342077500007, 96.00114210000005, 41.32342077500007], [96.00114210000005, 38.82342077500007, 98.50114210000005, 41.32342077500007], [98.50114210000005, 38.82342077500007, 101.00114210000005, 41.32342077500007]]
BBoxes_NorthWest =[[73.50114210000005, 36.32342077500007, 76.00114210000005, 38.82342077500007], [76.00114210000005, 36.32342077500007, 78.50114210000005, 38.82342077500007], [78.50114210000005, 36.32342077500007, 81.00114210000005, 38.82342077500007], [81.00114210000005, 36.32342077500007, 83.50114210000005, 38.82342077500007], [83.50114210000005, 36.32342077500007, 86.00114210000005, 38.82342077500007], [86.00114210000005, 36.32342077500007, 88.50114210000005, 38.82342077500007], [98.50114210000005, 36.32342077500007, 101.00114210000005, 38.82342077500007], [101.00114210000005, 36.32342077500007, 103.50114210000005, 38.82342077500007], [103.50114210000005, 36.32342077500007, 106.00114210000005, 38.82342077500007], [106.00114210000005, 36.32342077500007, 108.50114210000005, 38.82342077500007], [108.50114210000005, 36.32342077500007, 111.00114210000005, 38.82342077500007], [73.50114210000005, 38.82342077500007, 76.00114210000005, 41.32342077500007], [76.00114210000005, 38.82342077500007, 78.50114210000005, 41.32342077500007], [78.50114210000005, 38.82342077500007, 81.00114210000005, 41.32342077500007], [81.00114210000005, 38.82342077500007, 83.50114210000005, 41.32342077500007], [83.50114210000005, 38.82342077500007, 86.00114210000005, 41.32342077500007], [86.00114210000005, 38.82342077500007, 88.50114210000005, 41.32342077500007], [88.50114210000005, 38.82342077500007, 91.00114210000005, 41.32342077500007], [91.00114210000005, 38.82342077500007, 93.50114210000005, 41.32342077500007], [93.50114210000005, 38.82342077500007, 96.00114210000005, 41.32342077500007], [96.00114210000005, 38.82342077500007, 98.50114210000005, 41.32342077500007], [98.50114210000005, 38.82342077500007, 101.00114210000005, 41.32342077500007], [101.00114210000005, 38.82342077500007, 103.50114210000005, 41.32342077500007], [103.50114210000005, 38.82342077500007, 106.00114210000005, 41.32342077500007], [106.00114210000005, 38.82342077500007, 108.50114210000005, 41.32342077500007], [108.50114210000005, 38.82342077500007, 111.00114210000005, 41.32342077500007], [111.00114210000005, 38.82342077500007, 113.50114210000005, 41.32342077500007], [113.50114210000005, 38.82342077500007, 116.00114210000005, 41.32342077500007], [116.00114210000005, 38.82342077500007, 118.50114210000005, 41.32342077500007], [76.00114210000005, 41.32342077500007, 78.50114210000005, 43.82342077500007], [78.50114210000005, 41.32342077500007, 81.00114210000005, 43.82342077500007], [81.00114210000005, 41.32342077500007, 83.50114210000005, 43.82342077500007], [83.50114210000005, 41.32342077500007, 86.00114210000005, 43.82342077500007], [86.00114210000005, 41.32342077500007, 88.50114210000005, 43.82342077500007], [88.50114210000005, 41.32342077500007, 91.00114210000005, 43.82342077500007], [91.00114210000005, 41.32342077500007, 93.50114210000005, 43.82342077500007], [93.50114210000005, 41.32342077500007, 96.00114210000005, 43.82342077500007], [96.00114210000005, 41.32342077500007, 98.50114210000005, 43.82342077500007], [98.50114210000005, 41.32342077500007, 101.00114210000005, 43.82342077500007], [101.00114210000005, 41.32342077500007, 103.50114210000005, 43.82342077500007], [103.50114210000005, 41.32342077500007, 106.00114210000005, 43.82342077500007], [106.00114210000005, 41.32342077500007, 108.50114210000005, 43.82342077500007], [108.50114210000005, 41.32342077500007, 111.00114210000005, 43.82342077500007], [111.00114210000005, 41.32342077500007, 113.50114210000005, 43.82342077500007], [113.50114210000005, 41.32342077500007, 116.00114210000005, 43.82342077500007], [116.00114210000005, 41.32342077500007, 118.50114210000005, 43.82342077500007], [118.50114210000005, 41.32342077500007, 121.00114210000005, 43.82342077500007], [121.00114210000005, 41.32342077500007, 123.50114210000005, 43.82342077500007], [78.50114210000005, 43.82342077500007, 81.00114210000005, 46.32342077500007], [81.00114210000005, 43.82342077500007, 83.50114210000005, 46.32342077500007], [83.50114210000005, 43.82342077500007, 86.00114210000005, 46.32342077500007], [86.00114210000005, 43.82342077500007, 88.50114210000005, 46.32342077500007], [88.50114210000005, 43.82342077500007, 91.00114210000005, 46.32342077500007], [91.00114210000005, 43.82342077500007, 93.50114210000005, 46.32342077500007], [93.50114210000005, 43.82342077500007, 96.00114210000005, 46.32342077500007], [111.00114210000005, 43.82342077500007, 113.50114210000005, 46.32342077500007], [113.50114210000005, 43.82342077500007, 116.00114210000005, 46.32342077500007], [116.00114210000005, 43.82342077500007, 118.50114210000005, 46.32342077500007], [118.50114210000005, 43.82342077500007, 121.00114210000005, 46.32342077500007], [121.00114210000005, 43.82342077500007, 123.50114210000005, 46.32342077500007], [81.00114210000005, 46.32342077500007, 83.50114210000005, 48.82342077500007], [83.50114210000005, 46.32342077500007, 86.00114210000005, 48.82342077500007], [86.00114210000005, 46.32342077500007, 88.50114210000005, 48.82342077500007], [88.50114210000005, 46.32342077500007, 91.00114210000005, 48.82342077500007], [113.50114210000005, 46.32342077500007, 116.00114210000005, 48.82342077500007], [116.00114210000005, 46.32342077500007, 118.50114210000005, 48.82342077500007], [118.50114210000005, 46.32342077500007, 121.00114210000005, 48.82342077500007], [121.00114210000005, 46.32342077500007, 123.50114210000005, 48.82342077500007], [116.00114210000005, 48.82342077500007, 118.50114210000005, 51.32342077500007], [118.50114210000005, 48.82342077500007, 121.00114210000005, 51.32342077500007]]
BBox_dict = {
    "Northern": BBoxes_Northern,
    "Southern": BBoxes_Southern,
    "NorthWest": BBoxes_NorthWest,
    "Qingzang": BBoxes_Qingzang
}


def float_range(start, stop, step):
    ''' 支持 float 的步进函数

        输入 Input:
            start (float)  : 计数从 start 开始。默认是从 0 开始。
            end   (float)  : 计数到 stop 结束，但不包括 stop。
            step (float)  : 步长，默认为 1，如为浮点数，参照 steps 小数位数。

        输出 Output:
            浮点数列表

        例子 Example:
            # >>> print(float_range(3.612, 5.78, 0.22))
            [3.612, 3.832, 4.052, 4.272, 4.492, 4.712, 4.932, 5.152, 5.372]
    '''
    start_digit = len(str(start))-1-str(start).index(".")  # 取开始参数小数位数
    stop_digit = len(str(stop))-1-str(stop).index(".")    # 取结束参数小数位数
    step_digit = len(str(step))-1-str(step).index(".")    # 取步进参数小数位数
    digit = max(start_digit, stop_digit, step_digit)      # 取小数位最大值
    return [(start*10**digit+i*step*10**digit)/10**digit for i in range(int((stop-start)//step))]  # 是否+1取决于是否要用范围上限那个数


class CBRALocator:
    def __init__(self, file_root='', rectangle_pos=None, year = 2018):
        self.root = file_root
        self.pos = rectangle_pos
        self.img_list = []  # 在不考虑切片临界情况时，此list只有一个路径

        # 以下参数，只对CBRA适用
        self.longitude_from = 73.5
        self.longitude_to = 136.0 + 2.5
        self.latitude_from = 16.3
        self.latitude_to = 53.8 + 2.5
        self.bin = 2.5
        self.year = year

        self.longitude_list = float_range(self.longitude_from, self.longitude_to, self.bin)
        self.latitude_list = float_range(self.latitude_from, self.latitude_to, self.bin)

    def get_pos(self):
        return self.pos

    def locate_image(self):
        self.locate_mode = None
        """
        定位所需要的image以及其对应的数据位置
        CBRA的经纬度范围起止：Longitude: 73.5 ~ 136.0 ; Latitude: 16.3 ~ 53.8
        left_top(CBRA_name)______________
        |                               |
        |       --> longitude -->       |
        |                               |
        |               ↑               |
        |            latitude           |
        |               ↑               |
        |                               |
        |                               |
        |                               |
        _____________________right_bottom
        :return:
        """
        left_top = self.pos[0]  # [longitude, latitude]
        right_bottom = self.pos[1]  # [longitude, latitude]
        assert (left_top[0] >= self.longitude_from) & (left_top[0] <= self.longitude_to)
        assert (right_bottom[1] >= self.latitude_from) & (right_bottom[1] <= self.latitude_to)

        # TODO: 进一步检查这种计算方式是否合理，尝试使用GDAL等地理库计算offset而不是数学方法,缝隙间可能存在误差

        latitude_index_lt = int((left_top[1] * 10 - self.latitude_from * 10) / (self.bin * 10)) + 1
        longitude_index_lt = int((left_top[0] * 10 - self.longitude_from * 10) / (self.bin * 10))
        latitude_index_rb = int((right_bottom[1] * 10 - self.latitude_from * 10) / (self.bin * 10)) + 1
        longitude_index_rb = int((right_bottom[0] * 10 - self.longitude_from * 10) / (self.bin * 10))

        CBRA_name = []
        # 左上角的对应图像是必然需要的
        CBRA_name_lat = self.latitude_list[latitude_index_lt]
        CBRA_name_lon = self.longitude_list[longitude_index_lt]
        CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                      'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon, CBRA_name_lat)))

        # 接下来定位超过边界的其他图像
        if (latitude_index_rb != latitude_index_lt) | (longitude_index_rb != longitude_index_lt):
            # 只要不同，就找到四个角的对应位置，然后根据情况append进CBRA_name
            # 右上角对应的图像
            CBRA_name_lat_rt = self.latitude_list[latitude_index_lt]
            CBRA_name_lon_rt = self.longitude_list[longitude_index_lt + 1]
            # 右下角对应的图像
            CBRA_name_lat_rb = self.latitude_list[latitude_index_lt - 1]
            CBRA_name_lon_rb = self.longitude_list[longitude_index_lt + 1]
            # 左下角对应的图像
            CBRA_name_lat_lb = self.latitude_list[latitude_index_lt - 1]
            CBRA_name_lon_lb = self.longitude_list[longitude_index_lt]

            # 根据情况append
            if latitude_index_rb == latitude_index_lt:  # 右上角
                self.locate_mode = "RT"
                """
                ————————————|———————————>y(lon)
                |        ——-|-——        |
                |        |1 | 2|        |
                |        ——-|-——        |
                ————————————+———————————-
                |           |           |
                |           |           |
                ↓x(-lat)    |           |
                ————————————|———————————-
                """
                CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                              'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon_rt, CBRA_name_lat_rt)))
                CBRA_name.append('')  # 3
                CBRA_name.append('')  # 4


            elif longitude_index_rb == longitude_index_lt:  # 左下角
                self.locate_mode = "LB"
                """
                ————————————|———————————>y(lon)
                |           |           |
                |   ——-——   |           |
                |   | 1 |   |           |
                ————————————+———————————-
                |   | 3 |   |           |
                |   ——-——   |           |
                ↓x(-lat)    |           |
                ————————————|———————————-
                """
                CBRA_name.append('')  # 2
                CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                              'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon_lb, CBRA_name_lat_lb)))
                CBRA_name.append('')  # 4

            else:  # 右下角
                self.locate_mode = "RB"
                """
                ————————————|———————————>y(lon)
                |           |           |
                |        ——-|-——        |
                |        | 1|2 |        |
                —————————|——+——|————————-
                |        | 3|4 |        |
                |        ——-|-——        |
                |           |           |
                ↓x(-lat)    |           |
                ————————————|———————————-
                """
                CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                              'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon_rt, CBRA_name_lat_rt)))
                CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                              'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon_lb, CBRA_name_lat_lb)))
                CBRA_name.append(os.path.join(self.root, 'CBRA_{}'.format(self.year),
                                              'CBRA_{}_E{}_N{}.tif'.format(self.year, CBRA_name_lon_rb, CBRA_name_lat_rb)))

        else:
            # 若索取范围在同一幅图内
            self.locate_mode = "Dome"
            """
            ————————————|————————————
            |    ——--—— |           |
            |    |    | |           |
            |    ——--—— |           |
            ————————————+———————————-
            |           |           |
            |           |           |
            |           |           |
            ————————————|———————————-
            """
            CBRA_name.append('')  # 2
            CBRA_name.append('')  # 3
            CBRA_name.append('')  # 4

        self.CBRA_names = CBRA_name
        return CBRA_name


def clip_patches(root_path, save_path, save_name, loc_name, year, Lon_min, Lat_min, Lon_max, Lat_max):

    CBRA_locator = CBRALocator(root_path,
                               rectangle_pos=[[Lon_min + MINI_DISTANCE, Lat_max - MINI_DISTANCE],
                                              [Lon_max - MINI_DISTANCE, Lat_min + MINI_DISTANCE]],
                               year=year)
    CBRA_names = CBRALocator.locate_image(CBRA_locator)
    out_path = make_dir(os.path.join(save_path, str(year), loc_name))

    print CBRA_names  # 对应区域裁剪时所需要的所有的CBRA影像
    assert len(CBRA_names[0]) > 0
    assert len(CBRA_names[1]) == 0
    assert len(CBRA_names[2]) == 0
    assert len(CBRA_names[3]) == 0
    print "================NOW CLIPPING================"
    for ii in range(len(CBRA_names)):
        CBRA_path = CBRA_names[ii]
        if len(CBRA_path) == 0:  # 如果对应的影像不存在
            continue
        if not os.path.isfile(CBRA_path):
            continue
        out_raster = os.path.join(out_path, save_name + '_{:.1f}_{:.1f}.tif'.format(Lon_min, Lat_min))
        if os.path.isfile(out_raster) is not True:
            print "=======----processing: {}----=======".format(CBRA_path)
            arcpy.Clip_management(CBRA_path, rectangle='{} {} {} {}'.format(Lon_min, Lat_min, Lon_max, Lat_max),
                                  out_raster=out_raster, nodata_value=0, maintain_clipping_extent="MAINTAIN_EXTENT")
        else:  # 若已经有对应的影像，则跳过
            pass


if __name__ == '__main__':
    # Configs
    year = 2018  # 索取的数据年份
    CBRA_bin = 2.5
    patch_bin = 0.5

    root_path = r'G:\ProductData\CBRA'  # CBRA 数据存储位置，内包含2016-2021所有文件夹和影像
    save_path = r'G:\ProductData\CBRA\CBRA_building_check'  # 裁剪得到的影像的保存位置
    save_name = "Sentinel2_{}".format(str(year))  # 裁剪得到的影像系列的名称, 最终结果默认存在save_name0.tif中
    bin_num = int(CBRA_bin / patch_bin)
    # 获取目标的经纬度范围

    ## Single test
    # Lon_min, Lat_min = np.round([106.00114210000005, 31.323420775000073, 108.50114210000005, 33.82342077500007], 1)[0:2]
    # Lon_max, Lat_max = Lon_min+bin, Lat_min+bin
    # loc_name = 'Northern'
    # get_no_building(root_path, save_path, save_name, loc_name, year, Lon_min, Lat_min, Lon_max, Lat_max)

    for loc_name in ['Northern', 'Southern', 'Qingzang', 'NorthWest']:
        BBoxes = BBox_dict[loc_name]
        for bbox in BBoxes:
            Lon_min_, Lat_min_ = np.round(bbox, 1)[0:2]
            for i in range(bin_num):
                lat_min = Lat_min_ + patch_bin*i
                for j in range(bin_num):
                    lon_min = Lon_min_ + patch_bin*j
                    lon_max, lat_max = lon_min+patch_bin, lat_min+patch_bin
                    clip_patches(root_path, save_path, save_name, loc_name, year, lon_min, lat_min, lon_max, lat_max)
